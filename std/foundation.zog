
declare console: { log: _ => () }

trait Show {
    fun show(x: Self): str
}

let showNum: num => str = raw { n => String(n) }

impl Show for num {
    fun show(n) {
        showNum(n)
    }
}

impl Show for str {
    fun show(s) {
        s
    }
}

impl Show for bool {
    fun show(q) {
        if q { "true" } else { "false" }
    }
}

pub fun print(x) {
    (console.log)(x.show())
}

pub let raise: str => _ = raw { msg => { throw new Error(msg); } }

pub rewrite assert(test) -> if !(test) {
    raise("assertion failed: " ++ @show(test))
}

pub enum Option<a> { None, Some(a) }

pub let isSome = opt => match opt { Some(_) => true, _ => false }
pub let isNone = opt => match opt { None => true, _ => false }

pub let map = (opt, f) => match opt {
    Some(a) => Some(f(a))
    None => None
}

pub let flatMap = (opt, f) => match opt {
    Some(a) => f(a)
    None => None
}

pub enum Either<a, b> { Left(a), Right(b) }

pub let isLeft = either => match either { Left(_) => true, _ => false }
pub let isRight = either => match either { Right(_) => true, _ => false }

pub let mapEither = (either, f) => match either {
    Left(l) => Left(f(l))
    Right(r) => Right(f(r))
}

pub enum Result<t, e> { Ok(t), Error(e) }

pub let isOk = result => match result { Ok(_) => true, _ => false }
pub let isError = result => match result { Error(_) => true, _ => false }
