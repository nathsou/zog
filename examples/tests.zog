let print: _ => () = raw { console.log }
let raise: str => _ = raw { msg => { throw msg; } }
let push: (a[], a) => () = raw { (array, elem) => array.push(elem) }
let len: _[] => num = raw { array => array.length }
let at: (a[], num) => a = raw { (elems, index) => elems.at(index) }
let showNum: num => str = raw { n => String(n) }

enum Type {
   Unit
   Bool
   Num
   Str
   Variable(str)
   Tuple(Type[])
   Array(Type)
   Alias({ name: str, args: Type[] })
   Function({ args: Type[], returns: Type })
   Record({ field: str, type: Type }[])
}

let map = (xs: _[], f) => {
    mut ys = []
    
    for x in xs {
        ys->push(f(x))
    }
    
    ys
}

let join: (str[], str) => str = raw { (str, sep) => str.join(sep) }

let isTuple = type => match type { Tuple(_) => true, _ => false }

let show = type => match type {
    Unit => "unit"
    Bool => "bool"
    Num => "num"
    Str => "str"
    Variable(name) => name
    Tuple(args) => "(" ++ args->map(show)->join(", ") ++ ")"
    Array(ty) => show(ty) ++ "[]"
    Alias({ name, args }) => {
        if args->len == 0 {
            name
        } else {
            name ++ "(" ++ args->map(show)->join(", ") ++ ")"
        }
    }
    Function({ args, returns }) => {
        (if args->len == 1 and !args->at(0)->isTuple {
            show(args->at(0))
        } else {
            "(" ++ args->map(show)->join(", ") ++ ")"
        }) ++ " => " ++ show(returns)
    }
    Record(fields) => {
        let entries = fields->map(({ field, type }) => field ++ ": " ++ show(type))
        "{ " ++ entries->join(", ") ++ " }"
    }
}

rewrite assert(test) -> if !(test) {
    raise("assertion failed: " ++ @show(test))
}

let expectEqualAux = (a: a, b: a, showA: str, showB: str) => {
    if a != b {
       raise(showA ++ " != " ++ showB)
    }
}

rewrite expectEqual(a, b) -> expectEqualAux(a, b, @show(a), @show(b))

let expectTypeAux = (showExpr, actualType, expectedType) => {
    if actualType != expectedType {
       raise("Expected '" ++ showExpr ++ "' to have type: '" ++ expectedType ++ "', got: '" ++ actualType ++ "'")
    }
}

rewrite expectType(expr, expectedType) -> expectTypeAux(@show(expr), @type(expr)->show, expectedType)

let expectError: (() => _) => () = raw { fn => {
    try {
        fn();
        throw new Error("Expected test to fail")
    } catch (error) {}
}}

mut tests = []

let test = (name, fn) => {
    tests->push((name, fn))
}

let tryTest: (() => _) => str = raw { fn => {
    try {
        fn();
        return "ok";
    } catch (error) {
        return String(error);
    }
}}

let runTests = () => {
    let count = tests->len
    print("Running " ++ showNum(count) ++ " test suite" ++ (if count == 1 { "" } else { "s" }))
    
    for (name, fn) in tests {
        match tryTest(fn) {
           "ok" =>  print("[Success] " ++ name)
           err => print("[Error] " ++ name ++ ":\n" ++ err)
        }
    }
}

test("Primitives", () => {
    expectType(3, "num")
    expectType(3.14, "num")
    expectType((0), "num")
    expectType(true, "bool")
    expectType(false, "bool")
    expectType("hello", "str")
    expectType((), "unit")
    expectType((1, "zog", true), "(num, str, bool)")
    expectType(((1, (2, (3, (4)))), (5, 6)), "((num, (num, (num, num))), (num, num))")
    expectType({ a: 1, b: "zog", c: true }, "{ a: num, b: str, c: bool }")
})

test("Binary operators", () => {
    expectType(3 + 7, "num")
    expectType(3 - 7, "num")
    expectType(3 * 7, "num")
    expectType(3 / 7, "num")
    expectType(3 % 7, "num")
    expectType(3 * (7 + 1), "num")
    expectType(3 > 7, "bool")
    expectType(3 < 7, "bool")
    expectType(3 >= 7, "bool")
    expectType(3 <= 7, "bool")
    expectType(3 == 7, "bool")
    expectType(3 != 7, "bool")
    expectType("a" ++ "b", "str")
})

test("Functions", () => {
    expectType(x => x, "A => A")
    expectType(use id = x => x in (id(3), id(true)), "(num, bool)")
    expectType(_ => 1, "A => num")
    expectType((a, b) => a == b, "(A, A) => bool")
    expectType((a, b) => a != b, "(A, A) => bool")
    expectType(map, "(A[], A => B) => B[]")
    expectType(((a, _)) => a, "((A, B)) => A")
})

test("Recursion", () => {
    let fact = n => if n == 0 { 1 } else { n * fact(n - 1) }
    expectType(fact, "num => num")
    expectEqual(fact(0), 1)
    expectEqual(fact(17), 355687428096000)
})

enum BinaryOp { Plus, Minus }
enum UnaryOp { Bang, Minus }

test("Variants", () => {
    expectType(Plus, "BinaryOp")
    expectType(BinaryOp.Minus, "BinaryOp")
    expectType(UnaryOp.Minus, "UnaryOp")
})

runTests()

rewrite recordFields(record) -> match @type(record) {
    Record(entries) => entries->map({ field } => field)
    _ => []
}

rewrite tupleLength(tuple) -> match @type(tuple) {
    Tuple(elems) => elems->len
    _ => 1
}

assert({ a: 1, b: true }->recordFields->len == 3)
