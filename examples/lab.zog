let print: 'T => () = raw { console.log }
type BinOp = enum { Add, Sub, Mul, Div, Equ }
type Map = { get: str => 'A, set: (str, 'A) => (), has: str => bool }
let createMap: () => Map = raw { () => new Map() }
let clone: Map => Map = raw { map => new Map(map) }
let raise: str => 'Never = raw { msg => { throw new Error(msg); } }

type Expr = enum {
    Num num
    Bool bool
    Var str
    Let { name: str, val: Expr, rhs: Expr }
    LetRec { name: str, arg: str, body: Expr, rhs: Expr }
    Lambda { arg: str, body: Expr }
    Bin { lhs: Expr, op: BinOp, rhs: Expr }
    App { lhs: Expr, arg: Expr }
    If { cond: Expr, ifTrue: Expr, ifFalse: Expr }
}

type Env = Map

type Value = enum {
    Num num
    Bool bool
    Closure { arg: str, body: Expr, env: Env }
    RecClosure { name: str, arg: str, body: Expr, env: Env }
}

let eval = (expr: Expr, env: Env): Value => match expr {
    Num x => Num x
    Bool q => Bool q
    Var v => if env.has(v) env.get(v) else raise("undeclared variable")
    Let { name, val, rhs } => {
        let bodyEnv = env->clone
        bodyEnv.set(name, val->eval(env))
        rhs->eval(bodyEnv)
    }
    LetRec { name, arg, body, rhs } => {
        let bodyEnv = env->clone
        bodyEnv.set(name, Value.RecClosure { name: name, arg: arg, body: body, env: env })
        rhs->eval(bodyEnv)
    }
    Bin { lhs, op, rhs } => match (lhs->eval(env), rhs->eval(env)) {
        (Num a, Num b) => match op {
            Add => Num a + b
            Sub => Num a - b
            Mul => Num a * b
            Div => Num a / b
            Equ => Bool a == b
        }
        (Bool a, Bool b) => match op {
            Equ => Bool a == b
        }
        _ => raise("invalid operands in binary expression")
    }
    Lambda { arg, body } => Closure { arg: arg, body: body, env: env->clone }
    App { lhs, arg } => {
        match lhs->eval(env) {
            Closure { arg: argName, body, env: bodyEnv } => {
                bodyEnv.set(argName, arg->eval(env))
                body->eval(bodyEnv)
            }
            RecClosure { name, arg: argName, body, env: bodyEnv } => {
                bodyEnv.set(name, Closure { arg: argName, body: body, env: bodyEnv })
                bodyEnv.set(argName, arg->eval(env))
                body->eval(bodyEnv)
            }
            _ => raise("cannot call non-closure value")
        }
    }
    If { cond, ifTrue, ifFalse } => {
        match cond->eval(env) {
            Bool true => ifTrue->eval(env)
            Bool false => ifFalse->eval(env)
        }
    }
}

let env = createMap()

let fact = n => LetRec {
    name: "f",
    arg: "n",
    body: Bin {
        lhs: Var "n",
        op: Mul,
        rhs: If {
            cond: Bin { lhs: Var "n", op: Equ, rhs: Num 1 },
            ifTrue: Num 1,
            ifFalse: App {
                lhs: Var "f",
                arg: Bin { lhs: Var "n", op: Sub, rhs: Num 1 },
            },
        },
    },
    rhs: App { lhs: Var "f", arg: Num n },
}

print(eval(fact(17), env))
