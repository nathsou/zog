// import "std" { print }

declare console: { log: _ => () }

rewrite print(msg) -> console.log(msg)

let {
    E, LN2, LN10, LOG2E, LOG10E, PI, SQRT1_2, SQRT2,
    abs, acos, acosh, asin, asinh, atan, atanh, atan2,
    cbrt, ceil, clz32, cos, cosh, exp, expm1, floor, fround,
    hypot, imul, log, log1p, log10, log2, max, min, pow,
    random, round, sign, sin, sinh, sqrt, tan, tanh, trunc,
}: {
    E: num,
    LN2: num,
    LN10: num,
    LOG2E: num,
    LOG10E: num,
    PI: num,
    SQRT1_2: num,
    SQRT2: num,
    abs: num => num,
    acos: num => num,
    acosh: num => num,
    asin: num => num,
    asinh: num => num,
    atan: num => num,
    atanh: num => num,
    atan2: (num, num) => num,
    cbrt: num => num,
    ceil: num => num,
    clz32: num => num,
    cos: num => num,
    cosh: num => num,
    exp: num => num,
    expm1: num => num,
    floor: num => num,
    fround: num => num,
    hypot: num => num,
    imul: num => num,
    log: num => num,
    log1p: num => num,
    log10: num => num,
    log2: num => num,
    max: (num, num) => num,
    min: (num, num) => num,
    pow: (num, num) => num,
    random: (num, num) => num,
    round: (num, num) => num,
    sign: (num, num) => num,
    sin: (num, num) => num,
    sinh: (num, num) => num,
    sqrt: (num, num) => num,
    tan: (num, num) => num,
    tanh: (num, num) => num,
    trunc: (num, num) => num,
} = raw { Math } 

enum Option<a> { None, Some(a) }

enum Either<a, b> { Left(a), Right(b) }

enum Result<t, e> { Ok(t), Error(e) }

let isSome = opt => match opt { Some(_) => true, _ => false }
let isNone = opt => match opt { None => true, _ => false }

let isLeft = either => match either { Left(_) => true, _ => false }
let isRight = either => match either { Right(_) => true, _ => false }

let isOk = result => match result { Ok(_) => true, _ => false }
let isError = result => match result { Error(_) => true, _ => false }

let map = (opt, f) => match opt {
    Some(a) => Some(f(a))
    None => None
}

let flatMap = (opt, f) => match opt {
    Some(a) => f(a)
    None => None
}

let mapEither = (either, f) => match either {
    Left(l) => Left(f(l))
    Right(r) => Right(f(r))
}

let mapError = (result, f) => match result {
    Ok(value) => Ok(f(value))
    Error(error) => Error(error)
}

let age = Some(24)->map(n => n * n)
print(age)

print(cbrt(24))
