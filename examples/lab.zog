let print: 'T => () = raw { console.log }

type BinOp = enum { Add, Sub, Mul, Div }

type Expr = enum {
    Num num
    Var str
    Let { name: str, val: Expr, rhs: Expr }
    Fun { args: Expr[], body: Expr }
    Bin { lhs: Expr, op: BinOp, rhs: Expr }
}

// Idea compound type projection operator:
// Expr.Fun = { args: Expr[], body: Expr }
// Expr.Fun.args = Expr[]
// ('A, 'B).0 = 'A

type Vec2 = { x: num, y: num }

let apply = f => (u: Vec2, v: Vec2): Vec2 => { x: f(u.x, v.x), y: f(u.y, v.y) }
let add = apply((a, b) => a + b)
let sub = apply((a, b) => a - b)
