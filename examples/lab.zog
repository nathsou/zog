let print: 'T => () = raw { console.log }

type BinOp = enum { add, sub, mul, div }

type Expr = enum {
    Num num
    Var str
    Let { name: str, val: Expr, rhs: Expr }
    Fun { args: Expr[], body: Expr }
    Bin { lhs: Expr, op: BinOp, rhs: Expr }
}

type Pair = ('A, 'B)

let m = match ("hoy", { a: 3, b: 1 }) {
    ("yop", { a: 1 }) => 1
    ("hey", { a: 2 }) => 2
    ("hoy", { b: 1, a: 3 }) => 3
    ("hii", { b: 4 }) => 4
    _ => 0
}

print(m)
