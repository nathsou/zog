let print: _ => () = raw { console.log }
let push: (a[], a) => () = raw { (array, elem) => array.push(elem) }
let len: _[] => num = raw { array => array.length }
let strLen: str => num = raw { str => str.length }
let iter: a[] => Iterator<a> = raw { array => array[Symbol.iterator]() }
let parseNum: str => num = raw { n => Number(n) }
let infinity: num = raw { Infinity }
let sorted: num[] => num[] = raw { xs => xs.sort((a, b) => a - b) }
let slice: (a[], num, num) => a[] = raw { (xs, start, end) => xs.slice(start, end) }

let sample1 = [
    "1000",
    "2000",
    "3000",
    "",
    "4000",
    "",
    "5000",
    "6000",
    "",
    "7000",
    "8000",
    "9000",
    "",
    "10000",
]

let splitWhere = (xs: _[], shouldSplit) => {
    mut groups = []
    mut currentGroup = []
    
    for x in xs {
        if shouldSplit(x) {
            groups->push(currentGroup)
            currentGroup = []
        } else {
            currentGroup->push(x)
        }
    }
    
    if currentGroup->len > 0 {
        groups->push(currentGroup)
    }
    
    groups
}

let map = (xs: _[], f) => {
    mut ys = []
    
    for x in xs {
        ys->push(f(x))
    }
    
    ys
}

let sum = (xs: _[]) => {
    mut total = 0
    
    for x in xs {
        total += x
    }
    
    total
}

let max = (xs: _[]) => {
    mut max = -infinity
    
    for x in xs {
        if x > max {
            max = x
        }
    }
    
    max
}

let takeLast = (xs, n) => {
    let end = xs->len
    xs->slice(end - n, end)
}

let day1 = input => {
    part1: () => {
        input
             ->splitWhere(line => line->strLen == 0)
             ->map(group => sum(group->map(parseNum)))
             ->max
    },
    part2: () => {
        input
             ->splitWhere(line => line->strLen == 0)
             ->map(group => sum(group->map(parseNum)))
             ->sorted
             ->takeLast(3)
             ->sum
    },
}

print(day1(sample1).part2())
